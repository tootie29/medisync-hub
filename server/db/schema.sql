-- Create the database
CREATE DATABASE IF NOT EXISTS medi_hub;
USE medi_hub;

-- Users table
CREATE TABLE IF NOT EXISTS users (
  id VARCHAR(36) PRIMARY KEY,
  email VARCHAR(255) NOT NULL UNIQUE,
  name VARCHAR(255) NOT NULL,
  role ENUM('student', 'staff', 'head nurse', 'admin') NOT NULL,
  phone VARCHAR(20),
  date_of_birth DATE,
  gender ENUM('male', 'female', 'other'),
  address TEXT,
  emergency_contact TEXT,
  student_id VARCHAR(50),
  department VARCHAR(100),
  staff_id VARCHAR(50),
  position VARCHAR(100),
  faculty VARCHAR(100),
  password VARCHAR(255),
  email_verified BOOLEAN DEFAULT FALSE,
  verification_token VARCHAR(100),
  token_expiry TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Medical records table
CREATE TABLE IF NOT EXISTS medical_records (
  id VARCHAR(36) PRIMARY KEY,
  patient_id VARCHAR(36) NOT NULL,
  doctor_id VARCHAR(36) NOT NULL,
  date DATE NOT NULL,
  height DECIMAL(5,2) NOT NULL,
  weight DECIMAL(5,2) NOT NULL,
  bmi DECIMAL(4,2) NOT NULL,
  blood_pressure VARCHAR(20),
  temperature DECIMAL(3,1),
  diagnosis TEXT,
  notes TEXT,
  follow_up_date DATE,
  certificate_enabled BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (patient_id) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (doctor_id) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Medications for medical records
CREATE TABLE IF NOT EXISTS medications (
  id VARCHAR(36) PRIMARY KEY,
  medical_record_id VARCHAR(36) NOT NULL,
  medication_name VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (medical_record_id) REFERENCES medical_records(id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Vital signs table
CREATE TABLE IF NOT EXISTS vital_signs (
  id VARCHAR(36) PRIMARY KEY,
  medical_record_id VARCHAR(36) NOT NULL,
  heart_rate INT,
  blood_pressure VARCHAR(20),
  blood_glucose INT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (medical_record_id) REFERENCES medical_records(id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Appointments table
CREATE TABLE IF NOT EXISTS appointments (
  id VARCHAR(36) PRIMARY KEY,
  patient_id VARCHAR(36) NOT NULL,
  doctor_id VARCHAR(36),
  date DATE NOT NULL,
  start_time TIME NOT NULL,
  end_time TIME NOT NULL,
  status ENUM('pending', 'confirmed', 'cancelled', 'completed') NOT NULL,
  reason TEXT NOT NULL,
  notes TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (patient_id) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (doctor_id) REFERENCES users(id) ON DELETE SET NULL ON UPDATE CASCADE
);

-- Medicines inventory table
CREATE TABLE IF NOT EXISTS medicines (
  id VARCHAR(36) PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  category VARCHAR(100) NOT NULL,
  quantity INT NOT NULL,
  threshold INT NOT NULL,
  unit VARCHAR(50) NOT NULL,
  description TEXT,
  dosage VARCHAR(100),
  expiry_date DATE,
  supplier VARCHAR(255),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Logos table for storing clinic logos
CREATE TABLE IF NOT EXISTS logos (
  id VARCHAR(36) PRIMARY KEY,
  url VARCHAR(255) NOT NULL,
  position ENUM('primary', 'secondary') NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert default logos
INSERT INTO logos (id, url, position)
VALUES
('1', '/lovable-uploads/72c0d499-9e39-47a1-a868-677102ad3084.png', 'primary'),
('2', '/lovable-uploads/72c0d499-9e39-47a1-a868-677102ad3084.png', 'secondary');

-- Insert sample data for users
INSERT IGNORE INTO users (id, email, name, role, phone, date_of_birth, gender, address, emergency_contact)
VALUES
('1', 'admin@example.com', 'Admin User', 'admin', '123-456-7890', '1980-01-01', 'male', '123 Admin St', 'Jane Admin: 123-456-7890'),
('2', 'doctor@example.com', 'Head Nurse Smith', 'head nurse', '123-456-7891', '1975-05-15', 'female', '456 Doctor Ave', 'John Smith: 123-456-7892'),
('3', 'student@example.com', 'John Student', 'student', '123-456-7893', '2000-10-20', 'male', '789 Student Blvd', 'Mary Student: 123-456-7894'),
('4', 'staff@example.com', 'Sarah Staff', 'staff', '123-456-7895', '1990-08-12', 'female', '101 Staff Road', 'Mike Staff: 123-456-7896');

-- Add any sample user IDs that might be generated by the frontend in preview/demo mode
INSERT IGNORE INTO users (id, email, name, role, phone, date_of_birth, gender)
VALUES
('user-1743345661285', 'sample-user1@example.com', 'Sample User 1', 'student', '555-123-4567', '1998-05-12', 'male'),
('user-1743345661286', 'sample-user2@example.com', 'Sample User 2', 'student', '555-123-4568', '1999-07-15', 'female'),
('user-1743345661287', 'sample-user3@example.com', 'Sample User 3', 'student', '555-123-4569', '2000-11-20', 'male');
