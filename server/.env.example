
# Database Configuration
DB_HOST=localhost
DB_USER=entrsolu_climasysuser
DB_PASSWORD=+DrJ)ObKCc)2
DB_NAME=entrsolu_climasys

# PORT Configuration
# For cPanel: Check your cPanel Node.js app settings for the assigned port number
PORT=8080

# Set to 'production' for production environment
NODE_ENV=production

# Application URL path
# For API-only server on a separate domain, leave this empty
# For subdirectory access (e.g., yourdomain.com/api), set to '/api'
APPLICATION_URL=

# Enable database debugging (set to 'true' to see detailed MySQL logs)
# DB_DEBUG=true

# CORS Configuration - IMPORTANT FOR SEPARATE DOMAIN SETUP
# List the frontend domain that will access this API
# Example: https://climasys.entrsolutions.com
CORS_ALLOWED_ORIGIN=https://climasys.entrsolutions.com

# --------------------------------------------------
# Separate Domain Setup Instructions
# --------------------------------------------------
# When using a separate domain for your API server:
#
# 1. Frontend Domain: app.climasys.entrsolutions.com or climasys.entrsolutions.com
#    - Contains the React frontend files
#
# 2. API Domain: api.climasys.entrsolutions.com
#    - Contains this Node.js server
#    - Set APPLICATION_URL to empty string
#    - Set CORS_ALLOWED_ORIGIN to your frontend domain
#    - Ensure CORS is properly configured
#
# 3. DNS Configuration:
#    - Create A or CNAME records for both domains
#    - Point them to your hosting server IP
#
# 4. cPanel Configuration:
#    - Create separate Node.js application for the API domain
#    - Application URL: / (root of the domain)
#    - Application startup file: server.js
#
# 5. Frontend Configuration:
#    - Update API_BASE_URL in the frontend code to point to your API domain
#    - Example: const API_BASE_URL = 'https://api.climasys.entrsolutions.com/api';

# --------------------------------------------------
# TROUBLESHOOTING
# --------------------------------------------------
# If you see CORS errors:
# - Check that CORS_ALLOWED_ORIGIN is set correctly to your frontend domain
# - Verify that your frontend is making requests to the correct API URL
# - Make sure the API server is running and accessible
# - Check server logs for CORS-related messages
# - Use browser developer tools to inspect response headers
# - Ensure your hosting provider isn't blocking CORS headers
#
# If you see 404 errors:
# - Ensure your API domain is correctly set up in DNS
# - Verify the Node.js application is running
# - Check cPanel error logs for any Node.js errors
# - Confirm that the BASE_PATH in server.js matches your setup
#
# If you see EADDRINUSE errors:
# - This means the port specified is already in use
# - Update the PORT value in .env to use a different port

